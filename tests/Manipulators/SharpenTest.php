<?php

namespace Weserv\Images\Test\Manipulators;

use Jcupitt\Vips\Image;
use Jcupitt\Vips\Interpretation;
use Mockery\MockInterface;
use Weserv\Images\Api\Api;
use Weserv\Images\Client;
use Weserv\Images\Manipulators\Sharpen;
use Weserv\Images\Test\ImagesWeservTestCase;

class SharpenTest extends ImagesWeservTestCase
{
    /**
     * @var Client|MockInterface
     */
    private $client;

    /**
     * @var Api
     */
    private $api;

    /**
     * @var Sharpen
     */
    private $manipulator;

    public function setUp()
    {
        $this->client = $this->getMockery(Client::class);
        $this->api = new Api($this->client, $this->getManipulators());
        $this->manipulator = new Sharpen();
    }

    public function testCreateInstance(): void
    {
        $this->assertInstanceOf(Sharpen::class, $this->manipulator);
    }

    /**
     * Specific radius 10 (sigma 6)
     */
    public function testSharpenRadius10(): void
    {
        $testImage = $this->inputJpg;
        $expectedImage = $this->expectedDir . '/sharpen-10.jpg';
        $params = [
            'w' => '320',
            'h' => '240',
            't' => 'square',
            'sharp' => '1,2,6'
        ];

        $uri = basename($testImage);

        $this->client->shouldReceive('get')->with($uri)->andReturn($testImage);

        /** @var Image $image */
        $image = $this->api->run($uri, $params);

        $this->assertEquals(320, $image->width);
        $this->assertEquals(240, $image->height);
        $this->assertSimilarImage($expectedImage, $image);
    }

    /**
     * Specific radius 3 (sigma 1.5) and levels 0.5, 2.5
     */
    public function testSharpenRadius3(): void
    {
        $testImage = $this->inputJpg;
        $expectedImage = $this->expectedDir . '/sharpen-3-0.5-2.5.jpg';
        $params = [
            'w' => '320',
            'h' => '240',
            't' => 'square',
            'sharp' => '0.5,2.5,1.5'
        ];

        $uri = basename($testImage);

        $this->client->shouldReceive('get')->with($uri)->andReturn($testImage);

        /** @var Image $image */
        $image = $this->api->run($uri, $params);

        $this->assertEquals(320, $image->width);
        $this->assertEquals(240, $image->height);
        $this->assertSimilarImage($expectedImage, $image);
    }

    /**
     * Specific radius 5 (sigma 3.5) and levels 2, 4
     */
    public function testSharpenRadius5(): void
    {
        $testImage = $this->inputJpg;
        $expectedImage = $this->expectedDir . '/sharpen-5-2-4.jpg';
        $params = [
            'w' => '320',
            'h' => '240',
            't' => 'square',
            'sharp' => '2,4,3.5'
        ];

        $uri = basename($testImage);

        $this->client->shouldReceive('get')->with($uri)->andReturn($testImage);

        /** @var Image $image */
        $image = $this->api->run($uri, $params);

        $this->assertEquals(320, $image->width);
        $this->assertEquals(240, $image->height);
        $this->assertSimilarImage($expectedImage, $image);
    }

    /**
     * Specific radius 5 (sigma 3.5) and levels 4, 8 with alpha channel
     */
    public function testSharpenRadius5WithTransparency(): void
    {
        $testImage = $this->inputPngWithTransparency;
        $expectedImage = $this->expectedDir . '/sharpen-rgba.png';
        $params = [
            'w' => '320',
            'h' => '240',
            't' => 'square',
            'sharp' => '4,8,5'
        ];

        $uri = basename($testImage);

        $this->client->shouldReceive('get')->with($uri)->andReturn($testImage);

        /** @var Image $image */
        $image = $this->api->run($uri, $params);

        $this->assertEquals(320, $image->width);
        $this->assertEquals(240, $image->height);
        $this->assertSimilarImage($expectedImage, $image);
    }

    public function testMildSharpen(): void
    {
        $testImage = $this->inputJpg;
        $expectedImage = $this->expectedDir . '/sharpen-mild.jpg';
        $params = [
            'w' => '320',
            'h' => '240',
            't' => 'square',
            'sharp' => 'true'
        ];

        $uri = basename($testImage);

        $this->client->shouldReceive('get')->with($uri)->andReturn($testImage);

        /** @var Image $image */
        $image = $this->api->run($uri, $params);

        $this->assertEquals(320, $image->width);
        $this->assertEquals(240, $image->height);
        $this->assertSimilarImage($expectedImage, $image);
    }

    public function testSharpenCMYK(): void
    {
        $testImage = $this->inputJpgWithCmykProfile;
        $expectedImage = $this->expectedDir . '/sharpen-cmyk.jpg';
        $params = [
            'w' => '320',
            'h' => '240',
            't' => 'square',
            'sharp' => '1,2,6'
        ];

        $uri = basename($testImage);

        $this->client->shouldReceive('get')->with($uri)->andReturn($testImage);

        /** @var Image $image */
        $image = $this->api->run($uri, $params);

        $this->assertEquals(Interpretation::SRGB, $image->interpretation);
        $this->assertEquals(320, $image->width);
        $this->assertEquals(240, $image->height);
        $this->assertSimilarImage($expectedImage, $image);
    }

    public function testGetSharpen(): void
    {
        $this->assertSame([10.0, 2.0, -1.0], $this->manipulator->setParams(['sharp' => '10'])->getSharpen());
        $this->assertSame([50.5, 2.0, -1.0], $this->manipulator->setParams(['sharp' => 50.5])->getSharpen());
        $this->assertSame([5.0, 5.0, 3.0], $this->manipulator->setParams(['sharp' => '5,5,3'])->getSharpen());
        $this->assertSame([1.0, 2.0, -1.0], $this->manipulator->setParams(['sharp' => null])->getSharpen());
        $this->assertSame([1.0, 2.0, -1.0], $this->manipulator->setParams(['sharp' => 'a'])->getSharpen());
        $this->assertSame([1.0, 2.0, -1.0], $this->manipulator->setParams(['sharp' => '-1'])->getSharpen());
        $this->assertSame([1.0, 2.0, -1.0], $this->manipulator->setParams(['sharp' => '10001'])->getSharpen());
    }
}
